apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'pmd'
apply plugin: 'checkstyle'

android {

    compileSdkVersion 29

    //https://developer.android.com/studio/releases/build-tools
    buildToolsVersion '29.0.3'

    defaultConfig {
        applicationId "cat.mvmike.minimalcalendarwidget"
        minSdkVersion 26    // 8.0
        targetSdkVersion 29 // 10.0
        versionCode 20
        versionName "1.4.0"
        multiDexEnabled true
    }

    /*
     * To sign release builds, create the file gradle.properties in
     * ~/.gradle/ with this content:
     *
     * signingStoreFile=key.store
     * signingStorePassword=xxx
     * signingKeyAlias=alias
     * signingKeyPassword=xxx
     */
    if (project.hasProperty('signingStoreFile')
            && project.hasProperty('signingStorePassword')
            && project.hasProperty('signingKeyAlias')
            && project.hasProperty('signingKeyPassword')) {

        println "Found sign properties in gradle.properties! Signing buildâ€¦"
        signingConfigs {
            release {
                storeFile file(signingStoreFile)
                storePassword signingStorePassword
                keyAlias signingKeyAlias
                keyPassword signingKeyPassword
            }
        }
        buildTypes.release.signingConfig = signingConfigs.release
    } else {
        buildTypes.release.signingConfig = null
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError true
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }


    compileOptions {
        compileOptions.encoding = "UTF-8"

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def buildType = variant.variantData.variantConfiguration.buildType.name
            outputFileName = new File("min-cal-widget-" + buildType + ".apk")
        }
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()
        }
    }
}

dependencies {
    //
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    //https://developer.android.com/jetpack/androidx/versions/
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.appcompat:appcompat:1.1.0'

    //https://github.com/junit-team/junit5/releases
    def junitJupiterVersion = '5.6.2'
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitJupiterVersion"

    //https://github.com/mockito/mockito/releases
    testImplementation 'org.mockito:mockito-core:3.3.3'
}

// https://pmd.github.io/
pmd {
    toolVersion = '6.22.0'
    consoleOutput = true
}

task pmdMain(type: Pmd, dependsOn: "assembleDebug") {
    ruleSetFiles = files("${project.rootDir}/config/pmd/rules.xml")
    ruleSets = [] // otherwise defaults clash with the list in rules.xml
    source 'src/main/java'
    include '**/*.java'
}

task pmd(dependsOn: [pmdMain]) {}

// http://checkstyle.sourceforge.net
checkstyle {
    toolVersion = '8.31'
}

task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    source 'src/main/java'
    include '**/*.java'

    classpath = files()
}